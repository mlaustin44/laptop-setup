---
# Task 09: User Configuration

- name: Install shell and terminal tools
  pacman:
    name:
      - zsh
      - zsh-completions
      - zsh-syntax-highlighting
      - zsh-autosuggestions
      - bash-completion
      - fish
      - alacritty
      - kitty
      - foot
      - wezterm
    state: present

- name: Install Oh My Zsh
  block:
    - name: Check if Oh My Zsh is installed
      stat:
        path: "/home/{{ target_user }}/.oh-my-zsh"
      register: omz_installed

    - name: Download and install Oh My Zsh
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      args:
        creates: "/home/{{ target_user }}/.oh-my-zsh"
      become: no
      become_user: "{{ target_user }}"
      when: not omz_installed.stat.exists

- name: Set Zsh as default shell
  user:
    name: "{{ target_user }}"
    shell: /usr/bin/zsh

- name: Configure Zsh with Oh My Zsh
  copy:
    content: |
      # Path to oh-my-zsh
      export ZSH="$HOME/.oh-my-zsh"
      
      # Theme
      ZSH_THEME="robbyrussell"
      
      # Plugins
      plugins=(
        git
        docker
        docker-compose
        kubectl
        terraform
        aws
        npm
        node
        python
        pip
        rust
        cargo
        golang
        archlinux
        systemd
        sudo
        command-not-found
        zsh-autosuggestions
        zsh-syntax-highlighting
        history-substring-search
        colored-man-pages
        extract
        z
        fzf
      )
      
      # Oh My Zsh
      source $ZSH/oh-my-zsh.sh
      
      # User configuration
      export LANG=en_US.UTF-8
      export EDITOR='nvim'
      export VISUAL='nvim'
      export PAGER='less'
      
      # Path additions
      export PATH="$HOME/.local/bin:$PATH"
      export PATH="$HOME/.cargo/bin:$PATH"
      export PATH="$HOME/go/bin:$PATH"
      
      # Pyenv (must be before aliases that might use python)
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      
      # Go
      export GOPATH=$HOME/go
      export PATH=$PATH:$GOPATH/bin
      
      # Rust
      [ -f $HOME/.cargo/env ] && source $HOME/.cargo/env
      
      # Node Version Manager
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      
      # FZF configuration
      export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
      export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
      export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
      
      # Aliases
      alias ls='exa --icons'
      alias ll='exa -la --icons'
      alias la='exa -a --icons'
      alias lt='exa --tree --icons'
      alias cat='bat'
      alias grep='rg'
      alias find='fd'
      alias df='duf'
      alias du='dust'
      alias top='btop'
      alias htop='btop'
      alias vim='nvim'
      alias vi='nvim'
      
      # Git aliases
      alias g='git'
      alias gs='git status'
      alias ga='git add'
      alias gc='git commit'
      alias gp='git push'
      alias gl='git pull'
      alias gd='git diff'
      alias gco='git checkout'
      alias gb='git branch'
      alias glog='git log --oneline --graph --decorate'
      
      # Docker aliases
      alias d='docker'
      alias dc='docker-compose'
      alias dps='docker ps'
      alias di='docker images'
      
      # Pacman/paru aliases
      alias pac='sudo pacman'
      alias pacs='sudo pacman -S'
      alias pacr='sudo pacman -R'
      alias pacu='sudo pacman -Syu'
      alias paru='paru --bottomup'
      
      # System aliases
      alias reboot='sudo systemctl reboot'
      alias poweroff='sudo systemctl poweroff'
      alias suspend='systemctl suspend'
      alias hibernate='systemctl hibernate'
      
      # Functions
      mkcd() {
        mkdir -p "$1" && cd "$1"
      }
      
      extract() {
        if [ -f "$1" ]; then
          case "$1" in
            *.tar.bz2) tar xjf "$1" ;;
            *.tar.gz) tar xzf "$1" ;;
            *.bz2) bunzip2 "$1" ;;
            *.rar) unrar e "$1" ;;
            *.gz) gunzip "$1" ;;
            *.tar) tar xf "$1" ;;
            *.tbz2) tar xjf "$1" ;;
            *.tgz) tar xzf "$1" ;;
            *.zip) unzip "$1" ;;
            *.Z) uncompress "$1" ;;
            *.7z) 7z x "$1" ;;
            *) echo "'$1' cannot be extracted" ;;
          esac
        else
          echo "'$1' is not a valid file"
        fi
      }
      
      # Starship prompt (if installed)
      command -v starship >/dev/null && eval "$(starship init zsh)"
      
      # Zoxide (better cd)
      command -v zoxide >/dev/null && eval "$(zoxide init zsh)"
      
      # Atuin (shell history)
      command -v atuin >/dev/null && eval "$(atuin init zsh)"
    dest: "/home/{{ target_user }}/.zshrc"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'
    backup: yes

- name: Install Starship prompt from AUR
  become: no
  become_user: "{{ target_user }}"
  command: paru -S --noconfirm --needed starship-bin
  register: starship_install
  failed_when: false
  changed_when: "'Nothing to do' not in starship_install.stdout"

- name: Configure Starship
  copy:
    content: |
      # Starship configuration
      
      format = """
      $username\
      $hostname\
      $directory\
      $git_branch\
      $git_status\
      $python\
      $rust\
      $golang\
      $nodejs\
      $docker_context\
      $kubernetes\
      $terraform\
      $aws\
      $cmd_duration\
      $line_break\
      $character"""
      
      [username]
      show_always = true
      format = "[$user]($style) "
      
      [hostname]
      ssh_only = false
      format = "@ [$hostname]($style) "
      
      [directory]
      truncation_length = 3
      truncate_to_repo = true
      
      [git_branch]
      symbol = " "
      
      [git_status]
      conflicted = "üè≥"
      ahead = "‚á°${count}"
      behind = "‚á£${count}"
      diverged = "‚áï‚á°${ahead_count}‚á£${behind_count}"
      untracked = "ü§∑"
      stashed = "üì¶"
      modified = "üìù"
      staged = '[++\($count\)](green)'
      renamed = "üëÖ"
      deleted = "üóë"
      
      [python]
      symbol = " "
      
      [rust]
      symbol = " "
      
      [golang]
      symbol = " "
      
      [nodejs]
      symbol = " "
      
      [docker_context]
      symbol = " "
      
      [kubernetes]
      symbol = "‚ò∏ "
      disabled = false
      
      [terraform]
      symbol = "üí† "
      
      [aws]
      symbol = "  "
      
      [cmd_duration]
      min_time = 500
      format = "took [$duration](bold yellow)"
    dest: "/home/{{ target_user }}/.config/starship.toml"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'

- name: Configure Git
  block:
    - name: Set Git configuration
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { name: "user.name", value: "{{ git_user_name }}" }
        - { name: "user.email", value: "{{ git_user_email }}" }
        - { name: "core.editor", value: "vim" }
        - { name: "push.autoSetupRemote", value: "true" }
        - { name: "pull.rebase", value: "false" }
        - { name: "init.defaultBranch", value: "main" }
        - { name: "color.ui", value: "auto" }
        - { name: "core.autocrlf", value: "input" }
      become: no
      become_user: "{{ target_user }}"

- name: Configure SSH
  block:
    - name: Create SSH directory
      file:
        path: "/home/{{ target_user }}/.ssh"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0700'

    - name: Create SSH config
      copy:
        content: |
          # SSH Configuration
          
          Host *
              ServerAliveInterval 60
              ServerAliveCountMax 3
              TCPKeepAlive yes
              Compression yes
              
          # Example host configurations
          # Host myserver
          #     HostName server.example.com
          #     User myuser
          #     Port 22
          #     IdentityFile ~/.ssh/id_rsa
        dest: "/home/{{ target_user }}/.ssh/config"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'

- name: Configure Alacritty terminal
  copy:
    content: |
      # Alacritty configuration
      
      window:
        padding:
          x: 10
          y: 10
        opacity: 0.95
        decorations: full
      
      font:
        normal:
          family: "JetBrains Mono"
        bold:
          family: "JetBrains Mono"
        italic:
          family: "JetBrains Mono"
        size: 11.0
      
      colors:
        primary:
          background: '#1e1e2e'
          foreground: '#cdd6f4'
        
        cursor:
          text: '#1e1e2e'
          cursor: '#f5e0dc'
        
        normal:
          black:   '#45475a'
          red:     '#f38ba8'
          green:   '#a6e3a1'
          yellow:  '#f9e2af'
          blue:    '#89b4fa'
          magenta: '#f5c2e7'
          cyan:    '#94e2d5'
          white:   '#bac2de'
        
        bright:
          black:   '#585b70'
          red:     '#f38ba8'
          green:   '#a6e3a1'
          yellow:  '#f9e2af'
          blue:    '#89b4fa'
          magenta: '#f5c2e7'
          cyan:    '#94e2d5'
          white:   '#a6adc8'
      
      cursor:
        style:
          shape: Block
          blinking: On
      
      key_bindings:
        - { key: V, mods: Control|Shift, action: Paste }
        - { key: C, mods: Control|Shift, action: Copy }
        - { key: Plus, mods: Control, action: IncreaseFontSize }
        - { key: Minus, mods: Control, action: DecreaseFontSize }
        - { key: Key0, mods: Control, action: ResetFontSize }
    dest: "/home/{{ target_user }}/.config/alacritty/alacritty.toml"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'

- name: Create user bin directory
  file:
    path: "/home/{{ target_user }}/.local/bin"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'

- name: Add user bin to PATH in profile
  lineinfile:
    path: "/home/{{ target_user }}/.profile"
    line: 'export PATH="$HOME/.local/bin:$PATH"'
    create: yes
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'