---
# Task 14: BTRFS Maintenance and Snapshots

- name: Install BTRFS utilities
  pacman:
    name:
      - btrfs-progs
      - compsize
      - snapper
      - snap-pac
      - grub-btrfs
    state: present

- name: Install Timeshift from AUR
  become: no
  become_user: "{{ target_user }}"
  command: paru -S --noconfirm --needed timeshift timeshift-autosnap
  register: timeshift_install
  failed_when: false
  changed_when: "'Nothing to do' not in timeshift_install.stdout"

- name: Configure Snapper for root
  block:
    - name: Check if snapper config exists
      command: snapper list-configs
      register: snapper_configs
      changed_when: false
      ignore_errors: yes

    - name: Create snapper configuration for root
      command: snapper -c root create-config /
      when: "'root' not in snapper_configs.stdout"
      ignore_errors: yes

    - name: Configure snapper timeline
      copy:
        content: |
          # Snapper configuration for root
          TIMELINE_CREATE="yes"
          TIMELINE_CLEANUP="yes"
          TIMELINE_LIMIT_HOURLY="5"
          TIMELINE_LIMIT_DAILY="7"
          TIMELINE_LIMIT_WEEKLY="4"
          TIMELINE_LIMIT_MONTHLY="6"
          TIMELINE_LIMIT_YEARLY="2"
        dest: /etc/snapper/configs/root
      ignore_errors: yes

- name: Create BTRFS maintenance scripts
  copy:
    content: |
      #!/bin/bash
      # BTRFS maintenance script
      
      echo "🔧 BTRFS Maintenance Starting..."
      echo "================================"
      echo
      
      # Show filesystem usage
      echo "📊 Filesystem Usage:"
      btrfs filesystem df /
      echo
      btrfs filesystem usage /
      echo
      
      # Balance filesystem (light balance)
      echo "⚖️ Running BTRFS balance..."
      btrfs balance start -dusage=5 -musage=5 /
      
      # Scrub filesystem
      echo "🔍 Starting BTRFS scrub..."
      btrfs scrub start /
      
      # Check scrub status
      sleep 2
      btrfs scrub status /
      
      echo
      echo "✅ BTRFS maintenance completed"
    dest: "/home/{{ target_user }}/.local/bin/btrfs-maintenance"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'

- name: Create BTRFS snapshot script
  copy:
    content: |
      #!/bin/bash
      # Manual BTRFS snapshot creator
      
      SNAPSHOT_NAME="${1:-manual-$(date +%Y%m%d-%H%M%S)}"
      SNAPSHOT_PATH="/.snapshots/$SNAPSHOT_NAME"
      
      echo "📸 Creating BTRFS snapshot: $SNAPSHOT_NAME"
      
      # Create snapshots directory if it doesn't exist
      sudo mkdir -p /.snapshots
      
      # Create snapshot
      sudo btrfs subvolume snapshot / "$SNAPSHOT_PATH"
      
      if [ $? -eq 0 ]; then
          echo "✅ Snapshot created: $SNAPSHOT_PATH"
          echo
          echo "Recent snapshots:"
          ls -lt /.snapshots | head -10
      else
          echo "❌ Failed to create snapshot"
      fi
    dest: "/home/{{ target_user }}/.local/bin/btrfs-snapshot"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'

- name: Create systemd service for BTRFS maintenance
  copy:
    content: |
      [Unit]
      Description=BTRFS maintenance (balance and scrub)
      After=multi-user.target
      
      [Service]
      Type=oneshot
      ExecStart=/usr/bin/btrfs balance start -dusage=10 -musage=10 /
      ExecStart=/usr/bin/btrfs scrub start -B /
      StandardOutput=journal
      StandardError=journal
    dest: /etc/systemd/system/btrfs-maintenance.service

- name: Create systemd timer for weekly BTRFS maintenance
  copy:
    content: |
      [Unit]
      Description=Weekly BTRFS maintenance
      
      [Timer]
      OnCalendar=weekly
      OnBootSec=30min
      RandomizedDelaySec=1h
      Persistent=true
      
      [Install]
      WantedBy=timers.target
    dest: /etc/systemd/system/btrfs-maintenance.timer

- name: Enable BTRFS maintenance timer
  systemd:
    name: btrfs-maintenance.timer
    enabled: yes
    state: started
    daemon_reload: yes
  when: not vm_mode

- name: Enable snapper timeline
  systemd:
    name: snapper-timeline.timer
    enabled: yes
    state: started
  ignore_errors: yes

- name: Enable snapper cleanup
  systemd:
    name: snapper-cleanup.timer
    enabled: yes
    state: started
  ignore_errors: yes

- name: Configure Timeshift
  copy:
    content: |
      {
        "backup_device_uuid": "",
        "parent_device_uuid": "",
        "do_first_run": false,
        "btrfs_mode": true,
        "include_btrfs_home_for_backup": true,
        "include_btrfs_home_for_restore": false,
        "stop_cron_emails": true,
        "schedule_monthly": false,
        "schedule_weekly": true,
        "schedule_daily": true,
        "schedule_hourly": false,
        "schedule_boot": false,
        "count_monthly": 2,
        "count_weekly": 3,
        "count_daily": 5,
        "count_hourly": 6,
        "count_boot": 5,
        "snapshot_size": 0,
        "snapshot_count": 0,
        "exclude": [
          "/var/log/**",
          "/var/cache/**",
          "/var/tmp/**",
          "/tmp/**",
          "**.tmp",
          "**/.cache/**",
          "**/Downloads/**",
          "**/.local/share/Trash/**"
        ],
        "exclude-apps": []
      }
    dest: /etc/timeshift/timeshift.json
  ignore_errors: yes

- name: Create BTRFS info script
  copy:
    content: |
      #!/bin/bash
      # Show BTRFS filesystem information
      
      echo "================================"
      echo "   BTRFS Filesystem Info"
      echo "================================"
      echo
      
      echo "📁 Subvolumes:"
      sudo btrfs subvolume list /
      echo
      
      echo "📊 Space Usage:"
      sudo btrfs filesystem df /
      echo
      sudo compsize /
      echo
      
      echo "📸 Snapshots:"
      if [ -d /.snapshots ]; then
          ls -lh /.snapshots | head -10
      fi
      
      if command -v snapper &>/dev/null; then
          echo
          echo "📸 Snapper Snapshots:"
          sudo snapper list
      fi
      
      if command -v timeshift &>/dev/null; then
          echo
          echo "📸 Timeshift Snapshots:"
          sudo timeshift --list
      fi
    dest: "/home/{{ target_user }}/.local/bin/btrfs-info"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'